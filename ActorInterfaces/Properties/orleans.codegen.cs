//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#if !EXCLUDE_CODEGEN
#pragma warning disable 162
#pragma warning disable 219
#pragma warning disable 414
#pragma warning disable 649
#pragma warning disable 693
#pragma warning disable 1591
#pragma warning disable 1998

namespace GrainInterfaces
{
    using System;
    using System.Net;
    using System.Runtime.Serialization;
    using System.Runtime.Serialization.Formatters.Binary;
    using System.IO;
    using System.Collections.Generic;
    using Orleans;
    using Orleans.Runtime;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.10.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class CalculatorActorFactory
    {
        

            public static ICalculatorActor Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return CalculatorActorReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.10.0")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("GrainInterfaces.ICalculatorActor")]
        internal class CalculatorActorReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, GrainInterfaces.ICalculatorActor
        {
            

            public static ICalculatorActor Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (ICalculatorActor) global::Orleans.Runtime.GrainReference.CastInternal(typeof(ICalculatorActor), (global::Orleans.Runtime.GrainReference gr) => { return new CalculatorActorReference(gr);}, grainRef, -756097308);
            }
            
            protected internal CalculatorActorReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal CalculatorActorReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return -756097308;
                }
            }
            
            public override string InterfaceName
            {
                get
                {
                    return "GrainInterfaces.ICalculatorActor";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                CalculatorActorReference input = ((CalculatorActorReference)(original));
                return ((CalculatorActorReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                CalculatorActorReference input = ((CalculatorActorReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return CalculatorActorReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return (interfaceId == this.InterfaceId);
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return CalculatorActorMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task<double> GrainInterfaces.ICalculatorActor.Add(double @value)
            {

                return base.InvokeMethodAsync<System.Double>(414646648, new object[] {@value} );
            }
            
            System.Threading.Tasks.Task<double> GrainInterfaces.ICalculatorActor.Subtract(double @value)
            {

                return base.InvokeMethodAsync<System.Double>(642113178, new object[] {@value} );
            }
            
            System.Threading.Tasks.Task<double> GrainInterfaces.ICalculatorActor.Divide(double @value)
            {

                return base.InvokeMethodAsync<System.Double>(1252863460, new object[] {@value} );
            }
            
            System.Threading.Tasks.Task<double> GrainInterfaces.ICalculatorActor.Multiply(double @value)
            {

                return base.InvokeMethodAsync<System.Double>(1801435761, new object[] {@value} );
            }
            
            System.Threading.Tasks.Task<double> GrainInterfaces.ICalculatorActor.Set(double @value)
            {

                return base.InvokeMethodAsync<System.Double>(41249403, new object[] {@value} );
            }
            
            System.Threading.Tasks.Task<double> GrainInterfaces.ICalculatorActor.Get()
            {

                return base.InvokeMethodAsync<System.Double>(-940922787, null );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.10.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("GrainInterfaces.ICalculatorActor", -756097308)]
    internal class CalculatorActorMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return -756097308;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case -756097308:  // ICalculatorActor
                        switch (methodId)
                        {
                            case 414646648: 
                                return ((ICalculatorActor)grain).Add((System.Double)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 642113178: 
                                return ((ICalculatorActor)grain).Subtract((System.Double)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 1252863460: 
                                return ((ICalculatorActor)grain).Divide((System.Double)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 1801435761: 
                                return ((ICalculatorActor)grain).Multiply((System.Double)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 41249403: 
                                return ((ICalculatorActor)grain).Set((System.Double)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -940922787: 
                                return ((ICalculatorActor)grain).Get().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }
            catch(Exception ex)
            {
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case -756097308:  // ICalculatorActor
                    switch (methodId)
                    {
                        case 414646648:
                            return "Add";
                    case 642113178:
                            return "Subtract";
                    case 1252863460:
                            return "Divide";
                    case 1801435761:
                            return "Multiply";
                    case 41249403:
                            return "Set";
                    case -940922787:
                            return "Get";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
}
#pragma warning restore 162
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 649
#pragma warning restore 693
#pragma warning restore 1591
#pragma warning restore 1998
#endif
